---Team Members---
Ethan Anderson (ema8@clemson.edu)
Isaac Fletcher (ifletch@clemson.edu)
Caden Allen (caden3@clemson.edu)

[GitHub](https://github.com/AnyFridgeDev/AnyFridge)


AnyFridge Testing Guide 

Our tests are broken into two main categories
1. Onboard Software
2. Web App and Request Handling

Below our instructions and explanations for each test for each of the
two main categories.

---Onboard Software Tests---

For our onboard software, we use PlatformIO (PIO) to build and upload our code.
It's typically used as an extension for VS Code. 
To run our tests, you can use the CLI version which can be 
installed here: https://platformio.org/install 

--Test Barcode-- 

The barcode test ensures that we are able to scan UPC barcodes accurately.
The test starts by running a few unit test to ensure a good serial connection to
the barcode scanner. The test then enters a loop where it constantly scans and
prints any codes that are read to the serial monitor. 

Instructions:
1. Connect the barcode scanner using a breadboard
	(ESP32 pin) = (Scanner pin)
  	2 	= 	TX pin on scanner
  	3 	= 	RX pin on scanner
  	GND	= 	GND
  	3.3V 	= 	3.3V
2. Run the test (make sure you are in the `AnyFridge/Software` directory)
	`pio test -f test_barcode`

--Test WiFi--

The WiFi test connects to a hard-coded WiFi network and then checks that
google.com can be pinged successfully.
It also tests sending a GET request to a custom domain of af.ethananderson.dev
where we have a server running to show what contents it receives. 
This test allows to check the WiFi functionality of the board. 

Instructions: 
1. Edit the WiFi name and network passwords
	`vim test_wifi/test_wifi.cpp`
	Change `networkName` and `networkPswd` (smart phone hotspots work really well)

2. Run the test (make sure you are in the `AnyFridge/Software` directory)
	`pio test -f test_wifi`

--Test Access Point--

During the setup phase of the device, the user needs to be able to connect to
AnyFridge and give it network details to connect with.
The access point test puts the ESP32 into AP mode and then checks if 
it got a IP address.

Instructions:
1. Run the test
	`pio test -f test_ap` 


---Web App and Request Handling Tests--

Navigate to the `AnyFridge/WebApp` folder.

--Test Request Handling--

The AnyFridge device will send requests to this server, so we wrote tests that
emulate each of these requests to ensure our server handles them properly.

We check two main endpoints:
1. /api/update
Should change the list of scanned codes for the provided user.

2. /api/get/<userid>
Should return a list of all scanned codes for the provided user.

The test uses a FastAPI test client. 

Instructions:
1. Run the command: `python -m unittest tests/test_request_handling.py`

--Local cURL + frontend check--

Another test involves hosting the webapp locally, sending a POST request to it 
and then viewing the website to ensure the scan list was updated properly. 

Instructions:
1. cd into the `AnyFridge/webapp` directory 
2. Run the curl command with `sh tests/local_curl_check.sh <userid>`
	Put whatever you like for the userid.
3. View the website and see if Frosted brown sugar cinnamon pastries 
are shown in the list. 

---Integration Test--
Navigate to the `AnyFridge/` folder.

--Test System Integration--
A sample program has been provided to test the scanning, WiFi, and web request
components of the device. It is to be used in conjunction with the 
request handler and gradio test ui to confirm that codes are being appropriately 
scanned and sent over the network.

Instructions:
1. Edit the WiFi name, network passwords, and host address
	`vim software/test/test_integration/test_integration.cpp`
	Change `networkName` and `networkPswd` (smart phone hotspots work really well)
    Change `host` to point to designated machine on the same network that will
	serve request handler and UI. You'll need to get the ip address of this machine
	on your hotspot network. 
2. Start the request handler on designated machine: `python3 webapp/request_handler.py`
3. Start the gradio debugging UI on designated machine: `gradio webapp/ui.py`
4. Run the test
	`pio test -f test_integration` 
